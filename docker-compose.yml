version: "3.8"

services:
  ###########################################################################
  # REVERSE PROXY: TRAEFIK
  ###########################################################################
  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.filepath=/var/log/traefik/traefik.log"
      # Metrics for Prometheus
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.100000,0.300000,1.200000,5.000000"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8899"
      - "--metrics.prometheus.entryPoint=metrics"
      # Tracing for otlp
      - "--tracing.otlp=true"
      - "--tracing.otlp.http.endpoint=http://otel-collector:4318/v1/traces"
      - "--tracing.otlp.http.headers.foo=bar --tracing.otlp.http.headers.baz=buz"
      - "--tracing.otlp.grpc.insecure=true"

    ports:
      - "80:80"
      - "8080:8080"
      - "8899:8899"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-logs:/var/log/traefik"
    networks:
      - monitoring

  ###########################################################################
  # METRICS: PROMETHEUS
  ###########################################################################
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/ready"]
      interval: 10s
      timeout: 5s
      retries: 3

  ###########################################################################
  # VISUALIZATION: GRAFANA
  ###########################################################################
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - monitoring

  ###########################################################################
  # LOGGING: LOKI (Log Aggregation)
  ###########################################################################
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki-config.yml:/etc/loki/loki-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3

  ###########################################################################
  # LOG COLLECTION: PROMTAIL (Sends logs to Loki)
  ###########################################################################
  promtail:
    image: grafana/promtail:latest
    ports:
      - "9080:9080"
    volumes:
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik-logs:/var/log/traefik
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - monitoring

  ###########################################################################
  # CONTAINER MONITORING: CADVISOR
  ###########################################################################
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8085:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
      - "/etc/machine-id:/etc/machine-id:ro"
      - "/var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro"
    command:
      - "--housekeeping_interval=10s"
      - "--enable_metrics=cpu,memory,disk,diskIO,network,percpu,process"
      - "--store_container_labels=true"
      - "--docker_only=true"
    networks:
      - monitoring
    depends_on:
      - prometheus

  ###########################################################################
  # SYSTEM METRICS: NODE EXPORTER
  ###########################################################################
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring
    command:
      - "--path.rootfs=/host"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/host:ro,rbind"
    depends_on:
      - prometheus

  # Add Zipkin
  ###########################################################################
  # TRACING: GRAFANA TEMPO
  ###########################################################################
  tempo:
    image: grafana/tempo:latest
    ports:
      - "3200:3200" # Tempoâ€™s API/UI and ingestion endpoint (adjust if needed)
    volumes:
      - ./tempo-config.yml:/etc/tempo/tempo.yml
    command: -config.file=/etc/tempo/tempo.yml
    networks:
      - monitoring

  ###########################################################################
  # OTEL COLLECTOR TO EXPORT TO TEMPO
  ###########################################################################
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
    networks:
      - monitoring
    # Optionally, you can add a depends_on to ensure Tempo is running:
    depends_on:
      - tempo

    ###########################################################################
  # MICROSERVICES WITH TRAEFIK RULES
  ###########################################################################
  service-1:
    build:
      context: ./service-1
    volumes:
      - ./service-1/src:/app/src
    command: >
      sh -c "npm install -g nodemon && nodemon --watch src --ext ts --exec ts-node src/index.ts"
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=service-1
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-1
    labels:
      - "traefik.http.routers.service-1.rule=PathPrefix(`/service-1`)"
      - "traefik.http.middlewares.service-1-strip-prefix.stripPrefix.prefixes=/service-1"
      - "traefik.http.routers.service-1.middlewares=service-1-strip-prefix"
      - "traefik.http.services.service-1.loadbalancer.server.port=3000"
    depends_on:
      - traefik
    networks:
      - monitoring

  service-2:
    build:
      context: ./service-2
    volumes:
      - ./service-2/src:/app/src
    command: >
      sh -c "npm install -g nodemon && nodemon --watch src --ext ts --exec ts-node src/index.ts"
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=service-2
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-2
    labels:
      - "traefik.http.routers.service-2.rule=PathPrefix(`/service-2`)"
      - "traefik.http.middlewares.service-2-strip-prefix.stripPrefix.prefixes=/service-2"
      - "traefik.http.routers.service-2.middlewares=service-2-strip-prefix"
      - "traefik.http.services.service-2.loadbalancer.server.port=3000"
    depends_on:
      - traefik
    networks:
      - monitoring

  service-3:
    build:
      context: ./service-3
    volumes:
      - ./service-3/src:/app/src
    command: >
      sh -c "npm install -g nodemon && nodemon --watch src --ext ts --exec ts-node src/index.ts"
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=service-3
      - OTEL_RESOURCE_ATTRIBUTES=service.name=service-3
    labels:
      - "traefik.http.routers.service-3.rule=PathPrefix(`/service-3`)"
      - "traefik.http.middlewares.service-3-strip-prefix.stripPrefix.prefixes=/service-3"
      - "traefik.http.routers.service-3.middlewares=service-3-strip-prefix"
      - "traefik.http.services.service-3.loadbalancer.server.port=3000"
    depends_on:
      - traefik
    networks:
      - monitoring
  ###########################################################################
  # LOG MONITORING: DOZZLE
  ###########################################################################
  dozzle:
    image: amir20/dozzle:latest
    ports:
      - "8089:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    labels:
      - "traefik.http.routers.dozzle.rule=Host(`localhost`) && PathPrefix(`/dozzle`)"
      - "traefik.http.middlewares.dozzle-strip-prefix.stripPrefix.prefixes=/dozzle"
      - "traefik.http.routers.dozzle.middlewares=dozzle-strip-prefix"
    depends_on:
      - traefik

  ###########################################################################
  # NETWORKS & VOLUMES
  ###########################################################################

volumes:
  grafana-data:
  loki-data:

networks:
  monitoring:
    driver: bridge
