generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model caste {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  ethnicity_id    Int?
  ethnicity       ethnicity?        @relation(fields: [ethnicity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partner_profile partner_profile[]
  user            user[]
}

model city {
  id         Int     @id @default(autoincrement())
  si_enc     Bytes?
  ta_enc     Bytes?
  en_enc     Bytes?
  country_id Int
  country    country @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user[]
}

model civil_status {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model country {
  id             Int    @id @default(autoincrement())
  si_enc         Bytes?
  ta_enc         Bytes?
  en_enc         Bytes?
  phone_code_enc Bytes?
  city           city[]
  user           user[]
}

model drinking {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model edu_level {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model ethnicity {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  caste           caste[]
  partner_profile partner_profile[]
  user            user[]
}

model food_preference {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model hearts {
  id          Int    @id @default(autoincrement())
  user_id     BigInt
  free_hearts Int?   @default(5)
  paid_hearts Int?   @default(0)
  user        user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model height {
  id              Int               @id @default(autoincrement())
  value_enc       Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model horoscope_matching {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model interests_list {
  id             Int              @id @default(autoincrement())
  si_enc         Bytes?
  ta_enc         Bytes?
  en_enc         Bytes?
  user_interests user_interests[]
}

model packages {
  id           Int            @id @default(autoincrement())
  si_enc       Bytes?
  ta_enc       Bytes?
  en_enc       Bytes?
  amount       Decimal        @db.Decimal(10, 2)
  no_of_hearts Int
  status       String?        @db.VarChar(50)
  transactions transactions[]
}

model partner_profile {
  id                    BigInt              @id @default(autoincrement())
  user_id               BigInt
  min_age               Int?
  max_age               Int?
  gender_enc            Bytes?
  ethnicity_id          Int?
  religion_id           Int?
  edu_level_id          Int?
  nic_verified          Boolean?            @default(false)
  caste_id              Int?
  civil_status_id       Int?
  height_id             Int?
  food_preference_id    Int?
  drinking_id           Int?
  smoking_id            Int?
  horoscope_matching_id Int?
  caste                 caste?              @relation(fields: [caste_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  civil_status          civil_status?       @relation(fields: [civil_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drinking              drinking?           @relation(fields: [drinking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  edu_level             edu_level?          @relation(fields: [edu_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ethnicity             ethnicity?          @relation(fields: [ethnicity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  food_preference       food_preference?    @relation(fields: [food_preference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  height                height?             @relation(fields: [height_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  horoscope_matching    horoscope_matching? @relation(fields: [horoscope_matching_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  religion              religion?           @relation(fields: [religion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  smoking               smoking?            @relation(fields: [smoking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  user                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profession {
  id     Int    @id @default(autoincrement())
  si_enc Bytes?
  ta_enc Bytes?
  en_enc Bytes?
  user   user[]
}

model religion {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model report_users {
  id                                     Int    @id @default(autoincrement())
  report_user_id                         BigInt
  reporter_id                            BigInt
  reason_enc                             Bytes?
  user_report_users_report_user_idTouser user   @relation("report_users_report_user_idTouser", fields: [report_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_report_users_reporter_idTouser    user   @relation("report_users_reporter_idTouser", fields: [reporter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model smoking {
  id              Int               @id @default(autoincrement())
  si_enc          Bytes?
  ta_enc          Bytes?
  en_enc          Bytes?
  partner_profile partner_profile[]
  user            user[]
}

model transactions {
  id           Int       @id @default(autoincrement())
  user_id      BigInt
  package_id   Int
  amount       Decimal   @db.Decimal(10, 2)
  no_of_hearts Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  packages     packages  @relation(fields: [package_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                             BigInt              @id @default(autoincrement())
  first_name_enc                                 Bytes?
  dob_enc                                        Bytes?
  gender_enc                                     Bytes?
  ethnicity_id                                   Int?
  religion_id                                    Int?
  edu_level_id                                   Int?
  country_id                                     Int?
  city_id                                        Int?
  caste_id                                       Int?
  civil_status_id                                Int?
  profession_id                                  Int?
  height_id                                      Int?
  food_preference_id                             Int?
  drinking_id                                    Int?
  smoking_id                                     Int?
  horoscope_matching_id                          Int?
  male_siblings                                  Int?                @default(0)
  female_siblings                                Int?                @default(0)
  nic_enc                                        Bytes?
  bio_enc                                        Bytes?
  status                                         String?             @db.VarChar(50)
  nic_verified                                   Boolean?            @default(false)
  hearts                                         hearts[]
  partner_profile                                partner_profile[]
  report_users_report_users_report_user_idTouser report_users[]      @relation("report_users_report_user_idTouser")
  report_users_report_users_reporter_idTouser    report_users[]      @relation("report_users_reporter_idTouser")
  transactions                                   transactions[]
  caste                                          caste?              @relation(fields: [caste_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  city                                           city?               @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  civil_status                                   civil_status?       @relation(fields: [civil_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  country                                        country?            @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drinking                                       drinking?           @relation(fields: [drinking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  edu_level                                      edu_level?          @relation(fields: [edu_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ethnicity                                      ethnicity?          @relation(fields: [ethnicity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  food_preference                                food_preference?    @relation(fields: [food_preference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  height                                         height?             @relation(fields: [height_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  horoscope_matching                             horoscope_matching? @relation(fields: [horoscope_matching_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profession                                     profession?         @relation(fields: [profession_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  religion                                       religion?           @relation(fields: [religion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  smoking                                        smoking?            @relation(fields: [smoking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_interests                                 user_interests[]
  user_requests_user_requests_receiver_idTouser  user_requests[]     @relation("user_requests_receiver_idTouser")
  user_requests_user_requests_sender_idTouser    user_requests[]     @relation("user_requests_sender_idTouser")
}

model user_interests {
  id             Int            @id @default(autoincrement())
  user_id        BigInt
  interest_id    Int
  interests_list interests_list @relation(fields: [interest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_requests {
  id                                   Int       @id @default(autoincrement())
  sender_id                            BigInt
  receiver_id                          BigInt
  created_at                           DateTime? @default(now()) @db.Timestamp(6)
  user_user_requests_receiver_idTouser user      @relation("user_requests_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_user_requests_sender_idTouser   user      @relation("user_requests_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id   Int       @id @default(autoincrement())
  name Bytes?
  dob  DateTime? @db.Date
}
